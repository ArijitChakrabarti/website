{
  
    
        "post0": {
            "title": "Algorithmic Fairness in R",
            "content": "&lt;!DOCTYPE html&gt; . Tutorial on the fairness R package . How to measure fairness of a machine learning model? . To date, a number of algorithmic fairness metrics have been proposed. Demographic parity, proportional parity, equalized odds and predictive rate parity are the most commonly used metrics to evaluate fairness between sensitive groups in binary classification problems. Multiple other metrics have been proposed that use various metrics from the confusion matrix (e.g., false positive rate parity, false negative rate parity). . The fairness R package provides tools to easily calculate algorithmic fairness metrics for given predicted probabilities or predicted classes between different sensitive groups. It also provides opportunities to visualize and compare other prediction metrics between the subgroups. . Disclaimer! None of the implemented metrics are supposed to replace critical thinking about the problem in question. . Installation . You can instal the latest stable package version from CRAN by running: . install.packages(&#39;fairness&#39;) library(fairness) . You may also install the development version from Github: . library(devtools)&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt; devtools::install_github(&#39;kozodoi/fairness&#39;) library(fairness) . &lt;/div&gt; Data description . This package includes two data sets to study algorithmic fairness: compas and germancredit. In this tutorial, you will be able to use a simplified version of the landmark COMPAS data set containing containing criminal history of defendants from Broward County. You can read more about the data set here. To load the data set, all you need to do is: . data(&#39;compas&#39;) . The compas data set contains nine variables. The outcome variable is Two_yr_Recidivism, which is a binary indicator showing whether an individual commited a crime in the two-year period. The data also includes features on prior criminal record (Number_of_Priors and Misdemeanor) and other features describing age (Age_Above_FourtyFive and Age_Below_TwentyFive), sex (Female) and ethnicity (ethnicity). . You don’t really need to delve into the data much. To simplify illustration, we have already ran a prediction model that uses all features to predict Two_yr_Recidivism and concatenated the predicted probabilities (probability) and predicted classes (predicted) to the data. You will be able to use the probability and predicted columns directly in your analysis. Please feel free to set up other prediction models (e.g. excluding sensitive group information, such as sex and ethnicity) and use your generated predicted probabilities or classes to assess group fairness. . The second data set included in the package is a credit scoring data set labeled as germancredit. The data set includes 20 potential predictor features describing yhe loan applicants and an outcome variables named BAD, which is a binary indicator showing whether the applicant defaulted on a loan. Similarly to the compas data set, this data also includes two pre-made columns with model predictions named probability and predicted. Feel free to play wit this data as well! You can load it with: . data(&#39;germancredit&#39;) . Algorithmic group fairness metrics . The package currently includes nine fairness metrics and two other comparisons implemented. Many of these metrics are mutually exclusive: results from a given classification problem most often cannot be fair in terms of all evaluated group fairness metrics. Below, all these functions will be introduced in detail. For the sake of simplicity, we will use predicted probabilities for all these functions instead of predicted classes. Note that for all functions, in case of defining predicted probabilities, a cutoff needs to be defined in order to generate positive (1) or negative (0) predicted classes. Also, for all functions, a base group needs to be defined. All other groups will be compared to this base group in terms of fairness metrics. . An outlook on the confusion matrix . Most fairness metrics use various measures calculated from the confusion matrix. The confusion matrix is comprised of four distinct classes: . True positives (TP): True class positive and predicted positive (correct classification) | False positives (FP): True class negative and predicted positive (incorrect classification) | True negatives (TN): True class negative and predicted negative (correct classification) | False negatives (FN): True class positive and predicted negative (incorrect classification) | All fairness metrics are calculated using one or more of these measures. For a detailed overview of various measures and precise definitions, please click here, here or here. . Demographic parity . Demographic parity is achieved if the absolute number of positive predictions in the subgroups are close to each other. This measure does not take true class into consideration, only positive predictions. Formula: (TP + FP) . dem_parity(data = compas, outcome = &#39;Two_yr_Recidivism&#39;, group = &#39;ethnicity&#39;, probs = &#39;probability&#39;, preds_levels = c(&#39;no&#39;,&#39;yes&#39;), cutoff = 0.5, base = &#39;Caucasian&#39;) . Proportional parity . Proportional parity is very similar to Demographic parity. Proportional parity is achieved if the proportion of positive predictions in the subgroups are close to each other. This measure does not take true class into consideration, only positive predictions. Formula: (TP + FP) / (TP + FP + TN + FN) . prop_parity(data = compas, outcome = &#39;Two_yr_Recidivism&#39;, group = &#39;ethnicity&#39;, probs = &#39;probability&#39;, preds_levels = c(&#39;no&#39;,&#39;yes&#39;), cutoff = 0.5, base = &#39;Caucasian&#39;) . All the rest of the functions take the true class into consideration. . Equalized odds . Equalized odds are achieved if the sensitivities (true positives divided by all positives) in the subgroups are close to each other. Formula: TP / (TP + FN) . equal_odds(data = compas, outcome = &#39;Two_yr_Recidivism&#39;, group = &#39;ethnicity&#39;, probs = &#39;probability&#39;, preds_levels = c(&#39;no&#39;,&#39;yes&#39;), cutoff = 0.5, base = &#39;African_American&#39;) . Predictive rate parity . Predictive rate parity is achieved if the precisions or positive predictive values (true positives divided by all predicted positive) in the subgroups are close to each other. Formula: TP / (TP + FP) . pred_rate_parity(data = compas, outcome = &#39;Two_yr_Recidivism&#39;, group = &#39;ethnicity&#39;, probs = &#39;probability&#39;, preds_levels = c(&#39;no&#39;,&#39;yes&#39;), cutoff = 0.5, base = &#39;African_American&#39;) . Accuracy parity . Accuracy parity is achieved if the accuracies (all accurately classified divided by all predictions) in the subgroups are close to each other. Formula: (TP + TN) / (TP + FP + TN + FN) . acc_parity(data = compas, outcome = &#39;Two_yr_Recidivism&#39;, group = &#39;ethnicity&#39;, probs = &#39;probability&#39;, preds_levels = c(&#39;no&#39;,&#39;yes&#39;), cutoff = 0.5, base = &#39;African_American&#39;) . False negative rate parity . False negative rate parity is achieved if the false negative rates (division of false negatives with all positives) in the subgroups are close to each other. Formula: FN / (TP + FN) . fnr_parity(data = compas, outcome = &#39;Two_yr_Recidivism&#39;, group = &#39;ethnicity&#39;, probs = &#39;probability&#39;, preds_levels = c(&#39;no&#39;,&#39;yes&#39;), cutoff = 0.5, base = &#39;African_American&#39;) . False positive rate parity . False positive rate parity is achieved if the false positive rates (division of false positives with all negatives) in the subgroups are close to each other. Formula: FP / (TN + FP) . fpr_parity(data = compas, outcome = &#39;Two_yr_Recidivism&#39;, group = &#39;ethnicity&#39;, probs = &#39;probability&#39;, preds_levels = c(&#39;no&#39;,&#39;yes&#39;), cutoff = 0.5, base = &#39;African_American&#39;) . Negative predictive value parity . Negative predictive value parity is achieved if the negative predictive values (division of true negatives with all predicted negatives) in the subgroups are close to each other. This function can be considered the ‘inverse’ of Predictive rate parity. Formula: TN / (TN + FN) . npv_parity(data = compas, outcome = &#39;Two_yr_Recidivism&#39;, group = &#39;ethnicity&#39;, probs = &#39;probability&#39;, preds_levels = c(&#39;no&#39;,&#39;yes&#39;), cutoff = 0.5, base = &#39;African_American&#39;) . Specificity parity . Specificity parity is achieved if the specificities (division of true negatives with all negatives) in the subgroups are close to each other. This function can be considered the ‘inverse’ of Equalized odds. Formula: TN / (TN + FP) . spec_parity(data = compas, outcome = &#39;Two_yr_Recidivism&#39;, group = &#39;ethnicity&#39;, probs = &#39;probability&#39;, preds_levels = c(&#39;no&#39;,&#39;yes&#39;), cutoff = 0.5, base = &#39;African_American&#39;) . Two additional comparisons are implemented, namely ROC AUC and Matthews correlation coefficient comparisons. . ROC AUC comparison . This function calculates ROC AUC and visualizes ROC curves for all subgroups. Note that probabilities must be defined for this function. Also, as ROC evaluates all possible cutoffs, the cutoff argument is excluded from this function. . roc_parity(data = compas, outcome = &#39;Two_yr_Recidivism&#39;, group = &#39;ethnicity&#39;, probs = &#39;probability&#39;, preds_levels = c(&#39;no&#39;,&#39;yes&#39;), base = &#39;African_American&#39;) . Matthews correlation coefficient comparison . The Matthews correlation coefficient takes all 4 classes of the confusion matrix into consideration. According to some, it is the single most powerful metric in binary classification problems, especially for data with class imbalances. Formula: (TP×TN-FP×FN)/√((TP+FP)×(TP+FN)×(TN+FP)×(TN+FN)) . mcc_parity(data = compas, outcome = &#39;Two_yr_Recidivism&#39;, group = &#39;ethnicity&#39;, probs = &#39;probability&#39;, preds_levels = c(&#39;no&#39;,&#39;yes&#39;), cutoff = 0.5, base = &#39;African_American&#39;) . Output and visualizations . All functions output results and matching barcharts that provide visual cues about the parity metrics for the defined sensitive subgroups. For instance, let’s look at predictive rate parity with ethnicity being set as the sensitive group and considering Caucasians as the ‘base’ group: . output$Metric #&gt; Caucasian African_American Asian Hispanic #&gt; Precision 0.6967156 0.6828704 0.7777778 0.7194444 #&gt; Predictive Rate Parity 1.0000000 0.9801279 1.1163490 1.0326229 #&gt; Native_American Other #&gt; Precision 0.6666667 0.7209302 #&gt; Predictive Rate Parity 0.9568706 1.0347554 . In the upper row, the raw precision values are shown for all ethnicities, and in the row below, the relative precisions compared to Caucasians (1) are shown. Note that in case an other ethnic group is set as the base group (e.g. Hispanic), the raw precision values do not change, only the relative metrics: . output$Metric #&gt; Hispanic Caucasian African_American Asian #&gt; Precision 0.7194444 0.6967156 0.6828704 0.7777778 #&gt; Predictive Rate Parity 1.0000000 0.9684078 0.9491634 1.0810811 #&gt; Native_American Other #&gt; Precision 0.6666667 0.7209302 #&gt; Predictive Rate Parity 0.9266409 1.0020652 . A standard output is a barchart that shows the relative metrics for all subgroups. For the previous case (when Hispanic is defined as the base group), this plot would look like this: . output$Metric_plot . . When probabilities are defined, an extra density plot will be output with the distributions of probabilities of all subgroups and the user-defined cutoff: . output$Probability_plot . . Another example would be comparing males vs. females in terms of recidivism prediction and defining a 0.4 cutoff: . output$Probability_plot . . The function related to ROC AUC comparisons will output ROC curves for each subgroups. Let’s look at the plot, also comparing males vs. females: . output$ROCAUC_plot . . Closing words . You have read through the fairness R package tutorial and by now, you have a solid grip on algorithmic group fairness metrics. We hope that you will be able to use this R package in your data analysis! Please let us know if you have any issues here - fairness GitHub - or contact the authors if you have any feedback! . Nikita Kozodoi &amp; Tibor V. Varga . .",
            "url": "https://kozodoi.github.io/blog/r/fairness/2019/09/29/fairness-tutorial.html",
            "relUrl": "/r/fairness/2019/09/29/fairness-tutorial.html",
            "date": " • Sep 29, 2019"
        }
        
    
  

  
  

  
      ,"page1": {
          "title": "About",
          "content": "Hi, I am Nikita! . I am a PhD student at Humboldt University of Berlin and research associate at the Monedo data science team. Please click here to view my CV. . . . I am passionate about machine learning and data science. My latest work focuses on machine learning applications in the field of credit risk analytics. I also enjoy participating at machine learning competitions and hackathons. . This website hosts my blog with machine learning tutorials, competition solutions and findings from different projects. It also provides links to my academic publications and developed software packages. . . If you want to chat or see more of my work, please feel free to connect with me on different platforms: . LinkedIn | GitHub | Google Scholar | ResearchGate | Kaggle | . . I am also happy to chat on other social media: . Twitter | Instagram | .",
          "url": "https://kozodoi.github.io/blog/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  

  
      ,"page3": {
          "title": "Packages",
          "content": "This page provides a list of the Python and R packages I have developed. Follow me on GitHub to see my latest projects. . . dptools: Python package with helper functions for data processing and feature engineering. See on GitHub or PyPi. . | fairness: R package for computing different measures of algorithmic fairness. See on GitHub or CRAN. The tutorial on the package is available in this blogpost. . | .",
          "url": "https://kozodoi.github.io/blog/packages/",
          "relUrl": "/packages/",
          "date": ""
      }
      
  

  
      ,"page4": {
          "title": "Publications",
          "content": "This page provides a selected list of my publications in academic journals and conference proceedings. Please follow me on Google Scholar or ResearchGate to see all of my latest work. . . 2020 . Kozodoi, N., Katsas, P., Lessmann, S., Moreira-Matias, L., &amp; Papakonstantinou, K. (2020). Shallow Self-Learning for Reject Inference in Credit Scoring. In ECML PKDD 2019 Proceedings (pp. 516-532). Springer, Cham. Read on ResearchGate or on publisher’s website. | . 2019 . Kozodoi, N., Lessmann, S., Papakonstantinou, K., Gatsoulis, Y., &amp; Baesens, B. (2019). A multi-objective approach for profit-driven feature selection in credit scoring. Decision Support Systems, 120, 106-117. Read on ResearchGate or on publisher’s website. . | Kozodoi, N., Lessmann, S., Baesens, B., &amp; Papakonstantinou, K. (2019). Profit-Oriented Feature Selection in Credit Scoring Applications. In Operations Research 2018 Proceedings (pp. 59-65). Springer, Cham. Read on ResearchGate or on publisher’s website. . | .",
          "url": "https://kozodoi.github.io/blog/publications/",
          "relUrl": "/publications/",
          "date": ""
      }
      
  

  
  

  

  
  

  

  
  

  
  

  
  

  
      ,"page12": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://kozodoi.github.io/blog/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}