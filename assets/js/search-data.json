{
  
    
        "post0": {
            "title": "Detecting Blindness with Deep Learning",
            "content": "1. Overview . Can deep learning help to detect blindness? . This blogpost describes the pipeline of the project that develops a convolutional neural network (CNN) for predicting the severity of the diabetic retinopathy based on the patient&#39;s retina photograph. The project was completed within the scope of the Udacity Machine Learning Engineer nano-degree program and the Kaggle competition hosted by the Asia Pacific Tele-Ophthalmology Society (APTOS). . The blogpost provides a project walkthrough covering the important modeling steps: . data exploration and image preprocessing to normalize images from different clinics | using transfer learning to pre-train CNN on a large data set | employing techniques such as learning rate scheduler, test-time augmentation and others | . The modeling is performed in PyTorch. All Jupyter notebooks and a PDF report are available on Github. . 2. Motivation . Diabetic retinopathy (DR) is one of the leading causes of vision loss. The World Health Organization reports that more than 300 million people worldwide have diabetes (Wong et al 2016). According to a recent study from International Diabetes Federation, the global prevalence of DR among the individuals with diabetes for the period from 2015 to 2019 was at more than 25% (Thomas et al 2019). The disease prevalence has been rising rapidly in developing countries. . Early detection and treatment are crucial steps towards preventing DR. The screening procedure requires a trained clinical expert to examine the fundus photographs of the patient&#39;s retina. This creates delays in diagnosis and treatment of the disease. This is especially relevant for developing countries, which often lack qualified medical stuff to perform the diagnosis. Automated detection of DR can speed up the efficiency and coverage of the screening programs. . . Image source: Ophthalmology Physicians &amp; Surgeons . 3. Data preparation . Data preparation is a very important step that is frequently underestimated. The quality of the input data can have a strong impact on the resulting performance of the developed machine learning models. Therefore, it is crucial to take some time to look at the data and think about possible issues that should be addressed before moving on to the modeling stage. . Data exploration . The data set is available for the download at the competition&#39;s website. The data includes 3,662 labeled retina images of clinical patients and a test set with 1,928 images with unknown labels. . The images are labeled by a clinical expert. The integer labels indicate the severity of DR on a scale from 0 to 4, where 0 indicates no disease and 5 is the proliferative stage of DR. . Let us import the data and look at the class ditribution. . #collapse-hide ############ LIBRARIES import numpy as np import pandas as pd import torch import torchvision from torchvision import transforms, datasets from torch.utils.data import Dataset from PIL import Image, ImageFile ImageFile.LOAD_TRUNCATED_IMAGES = True import cv2 from tqdm import tqdm_notebook as tqdm import random import time import sys import os import math import matplotlib.pyplot as plt import seaborn as sns ########## SETTINGS pd.set_option(&#39;display.max_columns&#39;, None) %matplotlib inline import warnings warnings.filterwarnings(&#39;ignore&#39;) ############ CHECK DIMENSIONS # import data train = pd.read_csv(&#39;../input/aptos2019-blindness-detection/train.csv&#39;) test = pd.read_csv(&#39;../input/aptos2019-blindness-detection/sample_submission.csv&#39;) # check shape print(train.shape, test.shape) print(&#39;-&#39; * 15) print(train[&#39;diagnosis&#39;].value_counts(normalize = True)) ############ CLASS DISTRIBUTION # plot fig = plt.figure(figsize = (15, 5)) plt.hist(train[&#39;diagnosis&#39;]) plt.title(&#39;Class Distribution&#39;) plt.ylabel(&#39;Number of examples&#39;) plt.xlabel(&#39;Diagnosis&#39;) . . The data set is imbalanced. 49% of the images are healthy patients. The remaining 51 % are pictures with different stages of DR. The least common class is 3 (severe stage) with only 5% of the total examples. . The data is collected from multiple clinics in India using a variety of different camera models, which creates discrepancies in the image resolution, aspect ratio and other parameters. This is demonstrated in the snippet below, where we plot the histograms of image width, height and aspect ratio. . #collapse-show ############ IMAGE SIZES # placeholder image_stats = [] # import loop for index, observation in tqdm(train.iterrows(), total = len(train)): # import image img = cv2.imread(&#39;../input/aptos2019-blindness-detection/train_images/{}.png&#39;.format(observation[&#39;id_code&#39;])) # compute stats height, width, channels = img.shape ratio = width / height # save image_stats.append(np.array((observation[&#39;diagnosis&#39;], height, width, channels, ratio))) # construct DF image_stats = pd.DataFrame(image_stats) image_stats.columns = [&#39;diagnosis&#39;, &#39;height&#39;, &#39;width&#39;, &#39;channels&#39;, &#39;ratio&#39;] ############ IMAGE SIZE DISTRIBUTION fig = plt.figure(figsize = (15, 5)) # width plt.subplot(1, 3, 1) plt.hist(image_stats[&#39;width&#39;]) plt.title(&#39;(a) Image Width&#39;) plt.ylabel(&#39;Number of examples&#39;) plt.xlabel(&#39;Width&#39;) # height plt.subplot(1, 3, 2) plt.hist(image_stats[&#39;height&#39;]) plt.title(&#39;(b) Image Height&#39;) plt.ylabel(&#39;Number of examples&#39;) plt.xlabel(&#39;Height&#39;) # ratio plt.subplot(1, 3, 3) plt.hist(image_stats[&#39;ratio&#39;]) plt.title(&#39;(c) Aspect Ratio&#39;) plt.ylabel(&#39;Number of examples&#39;) plt.xlabel(&#39;Ratio&#39;) . . A high variety in the image parameters requires to be accounted for during the data prepossessing. . Now, let us take a look at the actual images. The code below creates the EyeData dataset class to import images using opencv library. We also create a DataLoader object to load sample images and visualize the first batch. . #collapse-hide ############ DATASET # image preprocessing function def prepare_image(path, image_size = 256): # import image = cv2.imread(path) image = cv2.cvtColor(image, cv2.COLOR_BGR2RGB) # resize image = cv2.resize(image, (int(image_size), int(image_size))) # convert to tensor image = torch.tensor(image) image = image.permute(2, 1, 0) return image # dataset class: class EyeData(Dataset): # initialize def __init__(self, data, directory, transform = None): self.data = data self.directory = directory self.transform = transform # length def __len__(self): return len(self.data) # get items def __getitem__(self, idx): img_name = os.path.join(self.directory, self.data.loc[idx, &#39;id_code&#39;] + &#39;.png&#39;) image = prepare_image(img_name) image = self.transform(image) label = torch.tensor(self.data.loc[idx, &#39;diagnosis&#39;]) return {&#39;image&#39;: image, &#39;label&#39;: label} ############ EXAMINE SAMPLE BATCH # transformations sample_trans = transforms.Compose([transforms.ToPILImage(), transforms.ToTensor(), ]) # dataset sample = EyeData(data = train, directory = &#39;../input/aptos2019-blindness-detection/train_images&#39;, transform = sample_trans) # data loader sample_loader = torch.utils.data.DataLoader(dataset = sample, batch_size = 10, shuffle = False, num_workers = 4) # display images for batch_i, data in enumerate(sample_loader): # extract data inputs = data[&#39;image&#39;] labels = data[&#39;label&#39;].view(-1, 1) # create plot fig = plt.figure(figsize = (15, 7)) for i in range(len(labels)): ax = fig.add_subplot(2, len(labels)/2, i + 1, xticks = [], yticks = []) plt.imshow(inputs[i].numpy().transpose(1, 2, 0)) ax.set_title(labels.numpy()[i]) break . . . The illustration further emphasizes the difference between the photographs in terms of aspect ratio, lighting conditions and camera quality. . The severity of DR is diagnosed by the presence of different visual cues on the retina photographs, such as abnormal blood vessels, hard exudates and so-called cotton wool spots. You can reed more about the diagnosing here. Comparing the sample images, we can see the presence of exudates and cotton wool spots on some of the retina photographs of sick patients. . Image preprocessing . To simplify the classification task for our model, we need to ensure that retina images look similar. . First, using cameras with different aspect ratios results in some images having large black areas around the eye. The black areas do not contain information relevant for prediction and can be cropped. However, we see that the size of black areas varies from one image to another. To address this, we develop a cropping function that converts the image to grayscale and marks black areas based on the pixel intensity. Next, we find a mask of the image by selecting rows and columns in which all pixels exceed the intensity threshold. This helps to remove vertical or horizontal rectangles filled with black similar to the ones observed in the upper-right image. After removing the black stripes, we resize the images to the same height and width. . Another issue is the eye shape. Depending on the image parameters, some eyes appear to have a circular form, whereas others look like ovals. As the size and shape of items located in the retina determine the disease severity, it is crucial to standardize the eye shape as well. To do so, we develop another cropping function that makes a circular crop of a particular radius around the center of the image. . Finally, we correct for the lightning and brightness discrepancies by smoothing the images using a Gaussian filter. . The snippet below provides the updated prepare_image() function that incorporates the discussed preprocessing steps. . #collapse-show ############ PREPROCESSING FUNCTIONS ##### image preprocessing function def prepare_image(path, sigmaX = 10, do_random_crop = False): # import image image = cv2.imread(path) image = cv2.cvtColor(image, cv2.COLOR_BGR2RGB) # perform smart crops image = crop_black(image, tol = 7) if do_random_crop == True: image = random_crop(image, size = (0.9, 1)) # resize and color image = cv2.resize(image, (int(image_size), int(image_size))) image = cv2.addWeighted(image, 4, cv2.GaussianBlur(image, (0, 0), sigmaX), -4, 128) # circular crop image = circle_crop(image, sigmaX = sigmaX) # convert to tensor image = torch.tensor(image) image = image.permute(2, 1, 0) return image ##### automatic crop of black areas def crop_black(img, tol = 7): if img.ndim == 2: mask = img &gt; tol return img[np.ix_(mask.any(1),mask.any(0))] elif img.ndim == 3: gray_img = cv2.cvtColor(img, cv2.COLOR_RGB2GRAY) mask = gray_img &gt; tol check_shape = img[:,:,0][np.ix_(mask.any(1),mask.any(0))].shape[0] if (check_shape == 0): return img else: img1 = img[:,:,0][np.ix_(mask.any(1),mask.any(0))] img2 = img[:,:,1][np.ix_(mask.any(1),mask.any(0))] img3 = img[:,:,2][np.ix_(mask.any(1),mask.any(0))] img = np.stack([img1, img2, img3], axis = -1) return img ##### circular crop around image center def circle_crop(img, sigmaX = 10): height, width, depth = img.shape largest_side = np.max((height, width)) img = cv2.resize(img, (largest_side, largest_side)) height, width, depth = img.shape x = int(width / 2) y = int(height / 2) r = np.amin((x,y)) circle_img = np.zeros((height, width), np.uint8) cv2.circle(circle_img, (x,y), int(r), 1, thickness = -1) img = cv2.bitwise_and(img, img, mask = circle_img) return img ##### random crop def random_crop(img, size = (0.9, 1)): height, width, depth = img.shape cut = 1 - random.uniform(size[0], size[1]) i = random.randint(0, int(cut * height)) j = random.randint(0, int(cut * width)) h = i + int((1 - cut) * height) w = j + int((1 - cut) * width) img = img[i:h, j:w, :] return img . . Next, we define a new EyeData class that uses the new processing functions and visualize a batch of sample images after corrections. . #collapse-show ############ DATASET # dataset class: class EyeData(Dataset): # initialize def __init__(self, data, directory, transform = None): self.data = data self.directory = directory self.transform = transform # length def __len__(self): return len(self.data) # get items def __getitem__(self, idx): img_name = os.path.join(self.directory, self.data.loc[idx, &#39;id_code&#39;] + &#39;.png&#39;) image = prepare_image(img_name) image = self.transform(image) label = torch.tensor(self.data.loc[idx, &#39;diagnosis&#39;]) return {&#39;image&#39;: image, &#39;label&#39;: label} ############ EXAMINE SAMPLE BATCH image_size = 256 # transformations sample_trans = transforms.Compose([transforms.ToPILImage(), transforms.ToTensor(), ]) # dataset sample = EyeData(data = train, directory = &#39;../input/aptos2019-blindness-detection/train_images&#39;, transform = sample_trans) # data loader sample_loader = torch.utils.data.DataLoader(dataset = sample, batch_size = 10, shuffle = False, num_workers = 4) # display images for batch_i, data in enumerate(sample_loader): # extract data inputs = data[&#39;image&#39;] labels = data[&#39;label&#39;].view(-1, 1) # create plot fig = plt.figure(figsize = (15, 7)) for i in range(len(labels)): ax = fig.add_subplot(2, len(labels)/2, i + 1, xticks = [], yticks = []) plt.imshow(inputs[i].numpy().transpose(1, 2, 0)) ax.set_title(labels.numpy()[i]) break . . . This looks much better! Comparing the retina images to the ones before the preprocessing, we can see that the apparent discrepancies between the photographs are now fixed. The eyes now have a similar circular shape and the color scheme is more consistent. This should help the model to detect the signs of the DR on the photographs. . Check out this notebook by Nakhon Ratchasima for more ideas on the image preprocessing for retina photographs. The functions in this project are largely inspired by his work suring the competition. . 4. Modeling . CNNs achieve state-of-the-art performance in computer vision tasks such as image classification. Recent medical research also shows a high potential of CNNs in the DR classification task (Gulshan et al 2016). Furthermore, using CNNs allows to take advantage of transfer learning techniques, which is relevant given a small sample size of the considered data set. . We employ the EfficientNet architecture for the CNN model. EfficientNet is one of the recent state-of-the-art image classification models (Tan et al 2019). EfficientNet encompasses 8 architecture variants (B0 to B7) which differ in the model complexity and default image size. . The architecture of EfficientNet B0 is visualized below. We test multiple EfficientNet neural network architectures and use the one that demonstrates the best performance. . . The modeling pipeline consists of the three stages: . Pre-training. The data set has a limited number of images (N = 3,662). We pre-train the CNN model on a larger data set from the previous Kaggle competition. | Fine-tuning. We fine-tune the model on the target data set. We use cross-validation and make modeling decisions based on the performance observed on the out-of-fold predictions. | Inference. We aggregate predictions of the models trained on different combinations of training folds and use test-time augmentation to further improve the performance. | . Pre-training . Due to a small sample size of the data set, we can not train a complex neural architecture from scratch. This is where transfer learning comes in handy. The idea of transfer learning is to pre-train a model on a different data (source domain) and then fine-tune on the relevant data set (target domain). . A good candidate for the source domain is the ImageNet database. Most published CNN models are trained on that data. However, ImageNet images are substantially different from the retina images we want to classify. Although intializing the CNN with ImageNet weights might help the network to transfer the knowledge of basic image patterns such as shapes and edges, we still need to learn a lot from the target domain. . It turns out that APTOS has also hosted another Kaggle competition on the DR classification in 2015. The data set of the 2015 competition features 35,126 retina images labeled by a clinician using the same scale as the target data set. The data is available for the download here. . Our final stretagy would be as foloows: . Initialize weights from the model trained on the ImageNet database. | Train the model on the 2015 data set. | Fine-tune the model on the 2019 data set. | . Now, we move on to the modeling! First, we enable GPU support and fix the random seeds. The function seed_everything() sets seed for multiple libraries including numpy and pytorch to ensure reproducibility. . #collapse-show # GPU check train_on_gpu = torch.cuda.is_available() if not train_on_gpu: print(&#39;CUDA is not available. Training on CPU...&#39;) device = torch.device(&#39;cpu&#39;) else: print(&#39;CUDA is available. Training on GPU...&#39;) device = torch.device(&#39;cuda:0&#39;) . . CUDA is available. Training on GPU... . #collapse-show # seed function def seed_everything(seed = 23): os.environ[&#39;PYTHONHASHSEED&#39;] = str(seed) random.seed(seed) np.random.seed(seed) torch.manual_seed(seed) torch.cuda.manual_seed(seed) torch.backends.cudnn.deterministic = True torch.backends.cudnn.benchmark = False # set seed seed = 23 seed_everything(seed) . . Let us take a quick look at the class distribution in the 2015 data set. . #collapse-show # import data train = pd.read_csv(&#39;../input/diabetic-retinopathy-resized/trainLabels.csv&#39;) train.columns = [&#39;id_code&#39;, &#39;diagnosis&#39;] test = pd.read_csv(&#39;../input/aptos2019-blindness-detection/train.csv&#39;) # check shape print(train.shape, test.shape) print(&#39;-&#39; * 15) print(train[&#39;diagnosis&#39;].value_counts(normalize = True)) print(&#39;-&#39; * 15) print(test[&#39;diagnosis&#39;].value_counts(normalize = True)) . . (35126, 2) (3662, 2) 0 0.734783 2 0.150658 1 0.069550 3 0.024853 4 0.020156 Name: diagnosis, dtype: float64 0 0.492900 2 0.272802 1 0.101038 4 0.080557 3 0.052703 Name: diagnosis, dtype: float64 . The imbalance in the source data set is stronger than in the target data: 73% of images represent healthy patients, whereas the most severe stage of the DR is only found in 2% of the images. To address the imbalance, we will use the target 2019 data set as a validation sample during training. . We create two Dataset objects to enable different data augmentations on the training and inference stages: EyeTrainData and EyeTestData. The training data set includes a random crop that is skipped for the test data. . #collapse-hide # dataset class: train class EyeTrainData(Dataset): # initialize def __init__(self, data, directory, transform = None): self.data = data self.directory = directory self.transform = transform # length def __len__(self): return len(self.data) # get items def __getitem__(self, idx): img_name = os.path.join(self.directory, self.data.loc[idx, &#39;id_code&#39;] + &#39;.jpeg&#39;) image = prepare_image(img_name, do_random_crop = True) image = self.transform(image) label = torch.tensor(self.data.loc[idx, &#39;diagnosis&#39;]) return {&#39;image&#39;: image, &#39;label&#39;: label} # dataset class: test class EyeTestData(Dataset): # initialize def __init__(self, data, directory, transform = None): self.data = data self.directory = directory self.transform = transform # length def __len__(self): return len(self.data) # get items def __getitem__(self, idx): img_name = os.path.join(self.directory, self.data.loc[idx, &#39;id_code&#39;] + &#39;.png&#39;) image = prepare_image(img_name, do_random_crop = False) image = self.transform(image) label = torch.tensor(self.data.loc[idx, &#39;diagnosis&#39;]) return {&#39;image&#39;: image, &#39;label&#39;: label} . . We use a batch size of 20 and set the image size of 256. The choice of these parameters is a trade-off between a predictive performance and resource capacity. Feel free to try larger image and batch sizes if you have resources. . We use the following data augmentations during training: . random horizontal flip (p = 0.5) | random vertical flip (p = 0.5) | random image rotation in the range of [-360 degrees, 360 degrees] | . #collapse-show # parameters batch_size = 20 image_size = 256 # train transformations train_trans = transforms.Compose([transforms.ToPILImage(), transforms.RandomRotation((-360, 360)), transforms.RandomHorizontalFlip(), transforms.RandomVerticalFlip(), transforms.ToTensor() ]) # validation transformations valid_trans = transforms.Compose([transforms.ToPILImage(), transforms.ToTensor(), ]) # create datasets train_dataset = EyeTrainData(data = train, directory = &#39;../input/diabetic-retinopathy-resized/resized_train/resized_train&#39;, transform = train_trans) valid_dataset = EyeTestData(data = test, directory = &#39;../input/aptos2019-blindness-detection/train_images&#39;, transform = valid_trans) # create data loaders train_loader = torch.utils.data.DataLoader(train_dataset, batch_size = batch_size, shuffle = True, num_workers = 4) valid_loader = torch.utils.data.DataLoader(valid_dataset, batch_size = batch_size, shuffle = False, num_workers = 4) . . Next, we instantiate the EfficentNet model. Let us use the B4 architecture, which is a trade-off between the training time and performance. We initialize the model weights using the parameters pre-trained on ImageNet by downloading the model architecture and weights in the PyTorch format. . The convolutional part of the network responsible for feature extraction outputs a tensor with 1792 features. To adapt the EfficentNet to our task, we replace the last fully-connected classification layer with a (1792, 5) fully-connected layer. . The function init_model() instantiates the CNN model. The argument train ensures that we load the ImageNet weights on the training stage and turn off the gradient computation on the inference stage. . #collapse-show ############ MODEL ARCHITECTURE # model name model_name = &#39;enet_b4&#39; # initialization function def init_model(train = True): ### training mode if train == True: # load pre-trained model model = EfficientNet.from_pretrained(&#39;efficientnet-b4&#39;, num_classes = 5) ### inference mode if train == False: # load pre-trained model model = EfficientNet.from_name(&#39;efficientnet-b4&#39;) model._fc = nn.Linear(model._fc.in_features, 5) # freeze layers for param in model.parameters(): param.requires_grad = False ### return model return model # check architecture model = init_model() print(model) . . Since we are dealing with a multiple classification problem, we use cross-entropy as a loss function. We implement nn.CrossEntropyLoss() function which combines logsoftmax and negative log-likelihood loss and applies them to the output of the last network layer. . The Kaggle competition uses Cohen&#39;s kappa for evaluation. Kappa measures the agreement between the actual and predicted labels. Since Kappa is non-differentiable, we can not use it as a loss function. At the same time, we can use Kappa to evaluate the performance and early stop the training epochs of CNN. . We use adaptive learning rate optimization algorithm (Adam) with a starting learning rate of 0.001. During training, we use a learning rate scheduler, which multiplies the learning rate by 0.5 after every 5 epochs. This helps to make smaller changes to the network weights when we are getting closer to the optimum. . #collapse-show # loss function criterion = nn.CrossEntropyLoss() # epochs max_epochs = 15 early_stop = 5 # learning rates eta = 1e-3 # scheduler step = 5 gamma = 0.5 # optimizer optimizer = optim.Adam(model.parameters(), lr = eta) scheduler = lr_scheduler.StepLR(optimizer, step_size = step, gamma = gamma) # initialize model and send to GPU model = init_model() model = model.to(device) . . After each training epoch, we validate the model on the target data. We extract class scores from the last fully-connected layer and predict the image class corresponding to the highest score. We train the network for 15 epochs, tracking the validation loss and Cohen&#39;s kappa. If the kappa does not increase for 5 consecutive epochs, we terminate the training process and save model weights for the epoch which is associated with the highest validation kappa. . The modeling loop is provided in the snippet below. . #collapse-hide # placeholders oof_preds = np.zeros((len(test), 5)) val_kappas = [] val_losses = [] trn_losses = [] bad_epochs = 0 # timer cv_start = time.time() # training and validation loop for epoch in range(max_epochs): ##### PREPARATION # timer epoch_start = time.time() # reset losses trn_loss = 0.0 val_loss = 0.0 # placeholders fold_preds = np.zeros((len(data_valid), 5)) ##### TRAINING # switch regime model.train() # loop through batches for batch_i, data in enumerate(train_loader): # extract inputs and labels inputs = data[&#39;image&#39;] labels = data[&#39;label&#39;].view(-1) inputs = inputs.to(device, dtype = torch.float) labels = labels.to(device, dtype = torch.long) optimizer.zero_grad() # forward and backward pass with torch.set_grad_enabled(True): preds = model(inputs) loss = criterion(preds, labels) loss.backward() optimizer.step() # compute loss trn_loss += loss.item() * inputs.size(0) ##### INFERENCE # switch regime model.eval() # loop through batches for batch_i, data in enumerate(valid_loader): # extract inputs and labels inputs = data[&#39;image&#39;] labels = data[&#39;label&#39;].view(-1) inputs = inputs.to(device, dtype = torch.float) labels = labels.to(device, dtype = torch.long) # compute predictions with torch.set_grad_enabled(False): preds = model(inputs).detach() fold_preds[batch_i * batch_size:(batch_i + 1) * batch_size, :] = preds.cpu().numpy() # compute loss loss = criterion(preds, labels) val_loss += loss.item() * inputs.size(0) # save predictions oof_preds = fold_preds # scheduler step scheduler.step() ##### EVALUATION # evaluate performance fold_preds_round = fold_preds.argmax(axis = 1) val_kappa = metrics.cohen_kappa_score(data_valid[&#39;diagnosis&#39;], fold_preds_round.astype(&#39;int&#39;), weights = &#39;quadratic&#39;) # save perfoirmance values val_kappas.append(val_kappa) val_losses.append(val_loss / len(data_valid)) trn_losses.append(trn_loss / len(data_train)) ##### EARLY STOPPING # display info print(&#39;- epoch {}/{} | lr = {} | trn_loss = {:.4f} | val_loss = {:.4f} | val_kappa = {:.4f} | {:.2f} min&#39;.format( epoch + 1, max_epochs, scheduler.get_lr()[len(scheduler.get_lr()) - 1], trn_loss / len(data_train), val_loss / len(data_valid), val_kappa, (time.time() - epoch_start) / 60)) # check if there is any improvement if epoch &gt; 0: if val_kappas[epoch] &lt; val_kappas[epoch - bad_epochs - 1]: bad_epochs += 1 else: bad_epochs = 0 # save model weights if improvement if bad_epochs == 0: oof_preds_best = oof_preds.copy() torch.save(model.state_dict(), &#39;../models/model_{}.bin&#39;.format(model_name)) # break if early stop if bad_epochs == early_stop: print(&#39;Early stopping. Best results: loss = {:.4f}, kappa = {:.4f} (epoch {})&#39;.format( np.min(val_losses), val_kappas[np.argmin(val_losses)], np.argmin(val_losses) + 1)) print(&#39;&#39;) break # break if max epochs if epoch == (max_epochs - 1): print(&#39;Did not met early stopping. Best results: loss = {:.4f}, kappa = {:.4f} (epoch {})&#39;.format( np.min(val_losses), val_kappas[np.argmin(val_losses)], np.argmin(val_losses) + 1)) print(&#39;&#39;) break # load best predictions oof_preds = oof_preds_best # print performance print(&#39;&#39;) print(&#39;Finished in {:.2f} minutes&#39;.format((time.time() - cv_start) / 60)) . . Loaded pretrained weights for efficientnet-b4 - epoch 1/15 | lr = 0.001 | trn_loss = 0.7140 | val_loss = 1.3364 | val_kappa = 0.7268 | 30.03 min - epoch 2/15 | lr = 0.001 | trn_loss = 0.6447 | val_loss = 1.0670 | val_kappa = 0.8442 | 27.19 min - epoch 3/15 | lr = 0.001 | trn_loss = 0.6203 | val_loss = 0.7667 | val_kappa = 0.7992 | 27.21 min - epoch 4/15 | lr = 0.001 | trn_loss = 0.6020 | val_loss = 0.7472 | val_kappa = 0.8245 | 27.68 min - epoch 5/15 | lr = 0.00025 | trn_loss = 0.5899 | val_loss = 0.7720 | val_kappa = 0.8541 | 29.42 min - epoch 6/15 | lr = 0.0005 | trn_loss = 0.5542 | val_loss = 0.9255 | val_kappa = 0.8682 | 29.33 min - epoch 7/15 | lr = 0.0005 | trn_loss = 0.5424 | val_loss = 0.8917 | val_kappa = 0.8763 | 29.91 min - epoch 8/15 | lr = 0.0005 | trn_loss = 0.5359 | val_loss = 0.9555 | val_kappa = 0.8661 | 30.70 min - epoch 9/15 | lr = 0.0005 | trn_loss = 0.5252 | val_loss = 0.8642 | val_kappa = 0.8778 | 28.76 min - epoch 10/15 | lr = 0.000125 | trn_loss = 0.5184 | val_loss = 1.1568 | val_kappa = 0.8403 | 31.14 min - epoch 11/15 | lr = 0.00025 | trn_loss = 0.4974 | val_loss = 0.9464 | val_kappa = 0.8784 | 28.00 min - epoch 12/15 | lr = 0.00025 | trn_loss = 0.4874 | val_loss = 0.9043 | val_kappa = 0.8820 | 27.50 min - epoch 13/15 | lr = 0.00025 | trn_loss = 0.4820 | val_loss = 0.7924 | val_kappa = 0.8775 | 27.36 min - epoch 14/15 | lr = 0.00025 | trn_loss = 0.4758 | val_loss = 0.9300 | val_kappa = 0.8761 | 27.33 min - epoch 15/15 | lr = 6.25e-05 | trn_loss = 0.4693 | val_loss = 0.9109 | val_kappa = 0.8803 | 27.51 min Did not met early stopping. Best results: loss = 0.7472, kappa = 0.8245 (epoch 4) Finished in 429.16 minutes . Training on the Kaggle GPU-enabled machine took us about 7 hours! Let us visualize the training and validation loss over the training epochs. . #collapse-show ########## PLOT LOSS AND KAPPA DYNAMICS # plot size fig = plt.figure(figsize = (15, 5)) # plot loss dynamics plt.subplot(1, 2, 1) plt.plot(trn_losses, &#39;red&#39;, label = &#39;Training&#39;) plt.plot(val_losses, &#39;green&#39;, label = &#39;Validation&#39;) plt.xlabel(&#39;Epoch&#39;) plt.ylabel(&#39;Loss&#39;) plt.legend() # plot kappa dynamics plt.subplot(1, 2, 2) plt.plot(val_kappas, &#39;blue&#39;, label = &#39;Kappa&#39;) plt.xlabel(&#39;Epoch&#39;) plt.ylabel(&#39;Kappa&#39;) plt.legend() . . . Below, we construct the confusion matrix of the trained model on validation set. The numbers in the table cells are percentages. According to the results, the model does a poor job in distinguishing the mild and moderate stages of DR: 86 % of images with mild DR are classified as moderate DR by the model. The best performance is observed for classifying the retina photographs of healthy people. Overall, we see that the model tends to confuse nearby severity stages but rarely missclassifies the proliferate and mild stages. . . The cross-entropy loss on validation sample reaches a minimum already after 3 epochs and does not improve with further training. At the same time, kappa continues to increase up to the 15th epoch. Since we use kappa to evaluate the quality of our solution, we save model weights after 15 epochs. . Fine-tuning . Fine-tuning on the target data set is performed using cross-validation with 4 folds. To ensure that we have enough examples of each class in the training sample, we perform cross-validation with stratification. On each iteration, we instantiate an EfficientNet B4 model with the same architecture as described in the previous section. Next, we load the saved weights from the model pre-trained on the source data. . We freeze all network layers except for the last fully-connected classification layer. The weights in this layer are fine-tuned during training. As on the pre-training stage, we use Adam with a learning rate of 0.001 and implement a learning rate scheduler which multiplies the learning rate by 0.5 after every 5 epochs. We also track the model performance on the validation fold and stop the training if kappa does not increase for 5 consecutive epochs. This process is repeated for each of the 4 folds, and the best model weights are saved for each combination of the training folds. . #collapse-hide ############ CHECK DIMENSIONS # import data train = pd.read_csv(&#39;../input/aptos2019-blindness-detection/train.csv&#39;) test = pd.read_csv(&#39;../input/aptos2019-blindness-detection/sample_submission.csv&#39;) # check shape print(train.shape, test.shape) print(&#39;-&#39; * 15) print(train[&#39;diagnosis&#39;].value_counts(normalize = True)) . . (3662, 2) (1928, 2) 0 0.492900 2 0.272802 1 0.101038 4 0.080557 3 0.052703 Name: diagnosis, dtype: float64 . The init_model() function needs to be updated. First, we now load the weights saved on the pre-training stage. Second, we freeze the first layers of the network in the training regime to make sure that fine-tuning is only performed on the last classification layer. . #collapse-show ############ MODEL ARCHITECTURE # model name model_name = &#39;enet_b4&#39; # initialization function def init_model(train = True, trn_layers = 2): ### training mode if train == True: # load pre-trained model model = EfficientNet.from_pretrained(&#39;efficientnet-b4&#39;, num_classes = 5) model.load_state_dict(torch.load(&#39;../models/model_{}.bin&#39;.format(model_name, 1))) # freeze first layers for child in list(model.children())[:-trn_layers]: for param in child.parameters(): param.requires_grad = False ### inference mode if train == False: # load pre-trained model model = EfficientNet.from_pretrained(&#39;efficientnet-b4&#39;, num_classes = 5) model.load_state_dict(torch.load(&#39;../models/model_{}.bin&#39;.format(model_name, 1))) # freeze all layers for param in model.parameters(): param.requires_grad = False ### return model return model # check architecture model = init_model() . . The training loop is now wrapped into a cross-validation loop. . #collapse-hide ########## VALIDATION SETTINGS # no. folds num_folds = 4 # creating splits skf = StratifiedKFold(n_splits = num_folds, shuffle = True, random_state = seed) splits = list(skf.split(train[&#39;id_code&#39;], train[&#39;diagnosis&#39;])) # placeholders oof_preds = np.zeros((len(train), 1)) # timer cv_start = time.time() ############ PARAMETERS # loss function criterion = nn.CrossEntropyLoss() # epochs max_epochs = 15 early_stop = 5 # learning rates eta = 1e-3 # scheduler step = 5 gamma = 0.5 ########## CROSS-VALIDATION LOOP for fold in tqdm(range(num_folds)): ####### DATA PREPARATION # display information print(&#39;-&#39; * 30) print(&#39;FOLD {}/{}&#39;.format(fold + 1, num_folds)) print(&#39;-&#39; * 30) # load splits data_train = train.iloc[splits[fold][0]].reset_index(drop = True) data_valid = train.iloc[splits[fold][1]].reset_index(drop = True) # create datasets train_dataset = EyeTrainData(data = data_train, directory = &#39;../input/aptos2019-blindness-detection/train_images&#39;, transform = train_trans) valid_dataset = EyeTrainData(data = data_valid, directory = &#39;../input/aptos2019-blindness-detection/train_images&#39;, transform = valid_trans) # create data loaders train_loader = torch.utils.data.DataLoader(train_dataset, batch_size = batch_size, shuffle = True, num_workers = 4) valid_loader = torch.utils.data.DataLoader(valid_dataset, batch_size = batch_size, shuffle = False, num_workers = 4) ####### MODEL PREPARATION # placeholders val_kappas = [] val_losses = [] trn_losses = [] bad_epochs = 0 # load best OOF predictions if fold &gt; 0: oof_preds = oof_preds_best.copy() # initialize and send to GPU model = init_model(train = True) model = model.to(device) # optimizer optimizer = optim.Adam(model._fc.parameters(), lr = eta) scheduler = lr_scheduler.StepLR(optimizer, step_size = step, gamma = gamma) ####### TRAINING AND VALIDATION LOOP for epoch in range(max_epochs): ##### PREPARATION # timer epoch_start = time.time() # reset losses trn_loss = 0.0 val_loss = 0.0 # placeholders fold_preds = np.zeros((len(data_valid), 1)) ##### TRAINING # switch regime model.train() # loop through batches for batch_i, data in enumerate(train_loader): # extract inputs and labels inputs = data[&#39;image&#39;] labels = data[&#39;label&#39;].view(-1) inputs = inputs.to(device, dtype = torch.float) labels = labels.to(device, dtype = torch.long) optimizer.zero_grad() # forward and backward pass with torch.set_grad_enabled(True): preds = model(inputs) loss = criterion(preds, labels) loss.backward() optimizer.step() # compute loss trn_loss += loss.item() * inputs.size(0) ##### INFERENCE # initialize model.eval() # loop through batches for batch_i, data in enumerate(valid_loader): # extract inputs and labels inputs = data[&#39;image&#39;] labels = data[&#39;label&#39;].view(-1) inputs = inputs.to(device, dtype = torch.float) labels = labels.to(device, dtype = torch.long) # compute predictions with torch.set_grad_enabled(False): preds = model(inputs).detach() _, class_preds = preds.topk(1) fold_preds[batch_i * batch_size:(batch_i + 1) * batch_size, :] = class_preds.cpu().numpy() # compute loss loss = criterion(preds, labels) val_loss += loss.item() * inputs.size(0) # save predictions oof_preds[splits[fold][1]] = fold_preds # scheduler step scheduler.step() ##### EVALUATION # evaluate performance fold_preds_round = fold_preds val_kappa = metrics.cohen_kappa_score(data_valid[&#39;diagnosis&#39;], fold_preds_round.astype(&#39;int&#39;), weights = &#39;quadratic&#39;) # save perfoirmance values val_kappas.append(val_kappa) val_losses.append(val_loss / len(data_valid)) trn_losses.append(trn_loss / len(data_train)) ##### EARLY STOPPING # display info print(&#39;- epoch {}/{} | lr = {} | trn_loss = {:.4f} | val_loss = {:.4f} | val_kappa = {:.4f} | {:.2f} min&#39;.format( epoch + 1, max_epochs, scheduler.get_lr()[len(scheduler.get_lr()) - 1], trn_loss / len(data_train), val_loss / len(data_valid), val_kappa, (time.time() - epoch_start) / 60)) # check if there is any improvement if epoch &gt; 0: if val_kappas[epoch] &lt; val_kappas[epoch - bad_epochs - 1]: bad_epochs += 1 else: bad_epochs = 0 # save model weights if improvement if bad_epochs == 0: oof_preds_best = oof_preds.copy() torch.save(model.state_dict(), &#39;../models/model_{}_fold{}.bin&#39;.format(model_name, fold + 1)) # break if early stop if bad_epochs == early_stop: print(&#39;Early stopping. Best results: loss = {:.4f}, kappa = {:.4f} (epoch {})&#39;.format( np.min(val_losses), val_kappas[np.argmin(val_losses)], np.argmin(val_losses) + 1)) print(&#39;&#39;) break # break if max epochs if epoch == (max_epochs - 1): print(&#39;Did not meet early stopping. Best results: loss = {:.4f}, kappa = {:.4f} (epoch {})&#39;.format( np.min(val_losses), val_kappas[np.argmin(val_losses)], np.argmin(val_losses) + 1)) print(&#39;&#39;) break # load best predictions oof_preds = oof_preds_best # print performance print(&#39;&#39;) print(&#39;Finished in {:.2f} minutes&#39;.format((time.time() - cv_start) / 60)) . . FOLD 1/4 Loaded pretrained weights for efficientnet-b4 - epoch 1/15 | lr = 0.001 | trn_loss = 0.6279 | val_loss = 0.5368 | val_kappa = 0.8725 | 7.30 min - epoch 2/15 | lr = 0.001 | trn_loss = 0.5699 | val_loss = 0.5402 | val_kappa = 0.8662 | 7.25 min - epoch 3/15 | lr = 0.001 | trn_loss = 0.5572 | val_loss = 0.5380 | val_kappa = 0.8631 | 7.31 min - epoch 4/15 | lr = 0.001 | trn_loss = 0.5482 | val_loss = 0.5357 | val_kappa = 0.8590 | 7.29 min - epoch 5/15 | lr = 0.00025 | trn_loss = 0.5658 | val_loss = 0.5357 | val_kappa = 0.8613 | 7.25 min - epoch 6/15 | lr = 0.0005 | trn_loss = 0.5537 | val_loss = 0.5346 | val_kappa = 0.8604 | 7.28 min Early stopping. Best results: loss = 0.5346, kappa = 0.8604 (epoch 6) FOLD 2/4 Loaded pretrained weights for efficientnet-b4 - epoch 1/15 | lr = 0.001 | trn_loss = 0.6535 | val_loss = 0.5295 | val_kappa = 0.8767 | 7.24 min - epoch 2/15 | lr = 0.001 | trn_loss = 0.5691 | val_loss = 0.5158 | val_kappa = 0.8717 | 7.20 min - epoch 3/15 | lr = 0.001 | trn_loss = 0.5645 | val_loss = 0.5136 | val_kappa = 0.8732 | 7.23 min - epoch 4/15 | lr = 0.001 | trn_loss = 0.5592 | val_loss = 0.5151 | val_kappa = 0.8705 | 7.26 min - epoch 5/15 | lr = 0.00025 | trn_loss = 0.5530 | val_loss = 0.5213 | val_kappa = 0.8686 | 7.27 min - epoch 6/15 | lr = 0.0005 | trn_loss = 0.5499 | val_loss = 0.5143 | val_kappa = 0.8733 | 7.21 min Early stopping. Best results: loss = 0.5136, kappa = 0.8732 (epoch 3) FOLD 3/4 Loaded pretrained weights for efficientnet-b4 - epoch 1/15 | lr = 0.001 | trn_loss = 0.6503 | val_loss = 0.5286 | val_kappa = 0.8937 | 7.16 min - epoch 2/15 | lr = 0.001 | trn_loss = 0.5916 | val_loss = 0.5166 | val_kappa = 0.8895 | 7.20 min - epoch 3/15 | lr = 0.001 | trn_loss = 0.5702 | val_loss = 0.5115 | val_kappa = 0.8834 | 7.34 min - epoch 4/15 | lr = 0.001 | trn_loss = 0.5606 | val_loss = 0.5133 | val_kappa = 0.8829 | 7.44 min - epoch 5/15 | lr = 0.00025 | trn_loss = 0.5640 | val_loss = 0.5081 | val_kappa = 0.8880 | 7.28 min - epoch 6/15 | lr = 0.0005 | trn_loss = 0.5515 | val_loss = 0.5109 | val_kappa = 0.8871 | 7.20 min Early stopping. Best results: loss = 0.5081, kappa = 0.8880 (epoch 5) FOLD 4/4 Loaded pretrained weights for efficientnet-b4 - epoch 1/15 | lr = 0.001 | trn_loss = 0.6379 | val_loss = 0.5563 | val_kappa = 0.8595 | 7.18 min - epoch 2/15 | lr = 0.001 | trn_loss = 0.5718 | val_loss = 0.5423 | val_kappa = 0.8610 | 7.20 min - epoch 3/15 | lr = 0.001 | trn_loss = 0.5590 | val_loss = 0.5433 | val_kappa = 0.8587 | 7.19 min - epoch 4/15 | lr = 0.001 | trn_loss = 0.5554 | val_loss = 0.5433 | val_kappa = 0.8579 | 7.17 min - epoch 5/15 | lr = 0.00025 | trn_loss = 0.5476 | val_loss = 0.5393 | val_kappa = 0.8608 | 7.18 min - epoch 6/15 | lr = 0.0005 | trn_loss = 0.5509 | val_loss = 0.5331 | val_kappa = 0.8610 | 7.32 min - epoch 7/15 | lr = 0.0005 | trn_loss = 0.5532 | val_loss = 0.5309 | val_kappa = 0.8567 | 7.28 min Early stopping. Best results: loss = 0.5309, kappa = 0.8567 (epoch 7) Finished in 181.29 minutes . The model converges rather quickly. The best validation performance is obtained after 3 to 7 training epochs depending on a fold. . Let us visualize the confusion matrix of the best model after fine tuning. The matrix illustrates the advantages of the fine-tuned model over the pre-trained CNN and indicates a better performance in classifying mild stages of the DR. However, we also observe that the model classifies too many examples as a moderate stage of DR (class = 2). We try to address this issue on the inference stage by manipulating the thresholds. . #collapse-hide ########## CONFUSION MATRIX # construct confusion matrx oof_preds_round = oof_preds.copy() cm = confusion_matrix(train[&#39;diagnosis&#39;], oof_preds_round) cm = cm.astype(&#39;float&#39;) / cm.sum(axis = 1)[:, np.newaxis] annot = np.around(cm, 2) # plot matrix fig, ax = plt.subplots(figsize = (8, 6)) sns.heatmap(cm, cmap = &#39;Blues&#39;, annot = annot, lw = 0.5) ax.set_xlabel(&#39;Prediction&#39;) ax.set_ylabel(&#39;Ground Truth&#39;) ax.set_aspect(&#39;equal&#39;) . . . Inference . Now we need to produce some predictions for the test sample! . We aggregate predictions from the models trained during the cross-validation loop. To do so, we extract class scores from the last fully-connected layer and define class predictions as the classes with the maximal predicted score out of 5 classes. Next, we average predictions of the 4 EfficientNet models trained on different combinations of the training folds. . #collapse-hide ############ TRANSFORMATIONS # parameters batch_size = 25 image_size = 256 # test transformations test_trans = transforms.Compose([transforms.ToPILImage(), transforms.RandomHorizontalFlip(), transforms.RandomVerticalFlip(), transforms.ToTensor() ]) ############ DATA LOADER # create dataset test_dataset = EyeTestData(data = test, directory = &#39;../input/aptos2019-blindness-detection/test_images&#39;, transform = test_trans) # create data loader test_loader = torch.utils.data.DataLoader(test_dataset, batch_size = batch_size, shuffle = False, num_workers = 4) ############ MODEL ARCHITECTURE # model name model_name = &#39;enet_b4&#39; # initialization function def init_model(train = True, trn_layers = 2): ### training mode if train == True: # load pre-trained model model = EfficientNet.from_pretrained(&#39;efficientnet-b4&#39;, num_classes = 5) # freeze first layers for child in list(model.children())[:-trn_layers]: for param in child.parameters(): param.requires_grad = False ### inference mode if train == False: # load pre-trained model model = EfficientNet.from_name(&#39;efficientnet-b4&#39;) model._fc = nn.Linear(model._fc.in_features, 5) # freeze all layers for param in model.parameters(): param.requires_grad = False ### return model return model # check architecture model = init_model(train = False) . . We also use test-time augmentations by creating 4 versions of the test images with random augmentations (horizontal and vertical flips) and average predictions over the image variants. The final prediction is therefore the average of 4 models $ times$ 4 test image variants. . #collapse-show ########## INFERENCE LOOP # validation settings num_folds = 4 tta_times = 4 # placeholders test_preds = np.zeros((len(test), num_folds)) cv_start = time.time() # prediction loop for fold in tqdm(range(num_folds)): # load model and sent to GPU model = init_model(train = False) model.load_state_dict(torch.load(&#39;../models/model_{}_fold{}.bin&#39;.format(model_name, fold + 1))) model = model.to(device) model.eval() # placeholder fold_preds = np.zeros((len(test), 1)) # loop through batches for _ in range(tta_times): for batch_i, data in enumerate(test_loader): inputs = data[&#39;image&#39;] inputs = inputs.to(device, dtype = torch.float) preds = model(inputs).detach() _, class_preds = preds.topk(1) fold_preds[batch_i * batch_size:(batch_i + 1) * batch_size, :] += class_preds.cpu().numpy() fold_preds = fold_preds / tta_times # aggregate predictions test_preds[:, fold] = fold_preds.reshape(-1) # print performance test_preds_df = pd.DataFrame(test_preds.copy()) print(&#39;Finished in {:.2f} minutes&#39;.format((time.time() - cv_start) / 60)) . . Let us have a look at the distribution of predictions. . #collapse-hide # show predictions print(&#39;-&#39; * 45) print(&#39;PREDICTIONS&#39;) print(&#39;-&#39; * 45) print(test_preds_df.head()) # show correlation print(&#39;-&#39; * 45) print(&#39;CORRELATION MATRIX&#39;) print(&#39;-&#39; * 45) print(np.round(test_preds_df.corr(), 4)) print(&#39;Mean correlation = &#39; + str(np.round(np.mean(np.mean(test_preds_df.corr())), 4))) # show stats print(&#39;-&#39; * 45) print(&#39;SUMMARY STATS&#39;) print(&#39;-&#39; * 45) print(test_preds_df.describe()) # show prediction distribution print(&#39;-&#39; * 45) print(&#39;ROUNDED PREDICTIONS&#39;) print(&#39;-&#39; * 45) for f in range(num_folds): print(np.round(test_preds_df[f]).astype(&#39;int&#39;).value_counts(normalize = True)) print(&#39;-&#39; * 45) # plot densities test_preds_df.plot.kde() . . PREDICTIONS 0 1 2 3 0 2.0 2.0 2.0 1.5 1 2.0 2.5 2.0 2.0 2 2.0 2.0 2.0 2.0 3 2.0 3.0 2.0 2.0 4 2.0 2.0 2.0 2.0 CORRELATION MATRIX 0 1 2 3 0 1.0000 0.9624 0.9573 0.9534 1 0.9624 1.0000 0.9686 0.9490 2 0.9573 0.9686 1.0000 0.9478 3 0.9534 0.9490 0.9478 1.0000 Mean correlation = 0.9673 SUMMARY STATS 0 1 2 3 count 1928.000000 1928.000000 1928.000000 1928.000000 mean 1.686722 1.710322 1.715249 1.650156 std 0.972716 0.973031 0.970417 0.960637 min 0.000000 0.000000 0.000000 0.000000 25% 1.500000 2.000000 2.000000 1.375000 50% 2.000000 2.000000 2.000000 2.000000 75% 2.000000 2.000000 2.000000 2.000000 max 4.000000 4.000000 4.000000 4.000000 ROUNDED PREDICTIONS 2 0.665456 0 0.200207 1 0.047199 3 0.044087 4 0.043050 Name: 0, dtype: float64 2 0.670124 0 0.195021 4 0.046162 3 0.045124 1 0.043568 Name: 1, dtype: float64 2 0.678942 0 0.195021 4 0.048755 1 0.038900 3 0.038382 Name: 2, dtype: float64 2 0.685685 0 0.207988 1 0.042012 4 0.040975 3 0.023340 Name: 3, dtype: float64 . &lt;matplotlib.axes._subplots.AxesSubplot at 0x7f8e403032d0&gt; . The model classifies a lot of images as moderate DR (class = 2). . To slightly reduce the number of such examples, we can change thresholds used to round the averaged predictions into classes. We use the following vector of thresholds: [0.5, 1.75, 2.25, 3.5]. The final prediction is set to zero if the average value is below 0.5; set to one if the average value lies in [0.5, 1.75), etc. This reduces the share of images classified as moderate DR in the test sample. . #collapse-show # aggregate predictions test_preds = test_preds_df.mean(axis = 1).values # set cutoffs coef = [0.5, 1.75, 2.25, 3.5] # rounding for i, pred in enumerate(test_preds): if pred &lt; coef[0]: test_preds[i] = 0 elif pred &gt;= coef[0] and pred &lt; coef[1]: test_preds[i] = 1 elif pred &gt;= coef[1] and pred &lt; coef[2]: test_preds[i] = 2 elif pred &gt;= coef[2] and pred &lt; coef[3]: test_preds[i] = 3 else: test_preds[i] = 4 . . We are done! We can now export test_preds as a csv file to submit it to the competition. . 5. Closing words . This blogpost provides a complete walkthrough on the project on detecting blindness in the retina images using CNNs. We use image preprocessing to reduce discrepancies across images taken in different clinics, apply transfer learning to leverage knowledge learned on larger data sets and implement different techniques to improve performance. . If you are still reading this post, you might be wondering about potential ways to further improve the solution. There are multiple ways to do that. First, employing a larger neural network architecture and extending the number of training epochs on the pre-training stage has a high potential for demonstrating a better performance. At the same time, this direction would require more computing power, which might not be optimal when considering the possible use of the automated retina image classification in practice. . Second, image preprocessing can be further improved. During the refinement process, the largest performance gains were attributed to including certain preprocessing steps when working with image data. This is a more efficient way to further improve the performance. . Finally, the best solutions of other teams in the Kaggle competition rely on model ensembles trained on different image sizes and/or model architectures. Incorporating multiple heterogeneous models and blending their predictions could also improve the predictive performance of the proposed solution. Ensembling predictions of models similar to the one discussed in this blogpost helped me to place in the top 9% of the competition. .",
            "url": "https://kozodoi.github.io/blog/python/deep%20learning/computer%20vision/2020/07/11/blindness-detection.html",
            "relUrl": "/python/deep%20learning/computer%20vision/2020/07/11/blindness-detection.html",
            "date": " • Jul 11, 2020"
        }
        
    
  
    
        ,"post1": {
            "title": "Algorithmic Fairness in R",
            "content": "&lt;!DOCTYPE html&gt; . Tutorial on the fairness R package . 1. Overview . How to measure fairness of a machine learning model? . To date, a number of algorithmic fairness metrics have been proposed. Demographic parity, proportional parity, equalized odds and predictive rate parity are the most commonly used metrics to evaluate fairness between sensitive groups in binary classification problems. Multiple other metrics have been proposed that use various metrics from the confusion matrix (e.g., false positive rate parity, false negative rate parity). . The fairness R package provides tools to easily calculate algorithmic fairness metrics for given predicted probabilities or predicted classes between different sensitive groups. It also provides opportunities to visualize and compare other prediction metrics between the subgroups. . This blogpost provides a brief description and examples of computing and visuzlizing different fariness metrics using the fairness package. . Disclaimer! None of the implemented metrics are supposed to replace critical thinking about the problem in question. . 2. Installation . You can instal the latest stable package version from CRAN by running: . install.packages(&#39;fairness&#39;) library(fairness) . You may also install the development version from Github: . devtools::install_github(&#39;kozodoi/fairness&#39;) library(fairness) . 3. Data description . The package includes two exemplary data sets to study algorithmic fairness: compas and germancredit. In this tutorial, you will be able to use a simplified version of the landmark COMPAS data set containing containing criminal history of defendants from Broward County. You can read more about the data set here. To load the data set, all you need to do is: . data(&#39;compas&#39;) . The compas data set contains nine variables. The outcome variable is Two_yr_Recidivism, which is a binary indicator showing whether an individual commited a crime within the two-year period. The data also includes features on prior criminal record (Number_of_Priors and Misdemeanor) and other features describing age (Age_Above_FourtyFive and Age_Below_TwentyFive), sex (Female) and ethnicity (ethnicity). . You don’t really need to delve into the data much. To simplify illustration, we have already ran a prediction model that uses all available features to predict Two_yr_Recidivism and concatenated the predicted probabilities (probability) and predicted classes (predicted) to the dataframe. You will be able to use the probability and predicted columns directly in your analysis. Please feel free to set up other prediction models (e.g. excluding sensitive group information, such as sex and ethnicity) and use your generated predicted probabilities or classes to assess group fairness. . The second data set included in the package is a credit scoring data set labeled as germancredit. The data set includes 20 features describing the loan applicants and an outcome variable named BAD, which is a binary indicator showing whether the applicant defaulted on a loan. Similarly to the compas data set, this data also includes two pre-made columns with model predictions named probability and predicted. Feel free to play wit this data as well! You can load it with: . data(&#39;germancredit&#39;) . 4. Algorithmic group fairness metrics . The package currently includes nine fairness metrics and two other performance comparisons. Many of these metrics are mutually exclusive: results from a given classification problem most often cannot be fair in terms of all evaluated group fairness metrics. Depending on the context, it is important to select an appropriate metric to evaluate fairness. . Below, we intrdocue functions that are used to compute the implemented metrics. For the sake of simplicity, we will use predicted probabilities for all these functions instead of predicted classes. Note that for all functions, in case of defining predicted probabilities, a cutoff needs to be defined in order to generate positive (1) or negative (0) predicted classes. Also, we need to defina a base group with respect to which we will compute the fairness metrics. . An outlook on the confusion matrix . Most fairness metrics are calculated based on the confusion matrix produced by a classification model. The confusion matrix is comprised of four distinct classes: . True positives (TP): the true class is positive and the prediction is positive (correct classification) | False positives (FP): the true class is negative and the prediction is positive (incorrect classification) | True negatives (TN): the true class is negative and the prediction is negative (correct classification) | False negatives (FN): the true class is positive and the prediction is negative (incorrect classification) | The fairness metrics are calculated by comparing one or more of these measures computed for different sensitive subgroups (e.g., male and female). For a detailed overview of various measures coming from the confusion matrix and precise definitions, please click here or here. . Demographic parity . Demographic parity is achieved if the absolute number of positive predictions in the subgroups are close to each other. This measure does not take true class into consideration and only depends on the model predictions. Formula: (TP + FP) . dem_parity(data = compas, outcome = &#39;Two_yr_Recidivism&#39;, group = &#39;ethnicity&#39;, probs = &#39;probability&#39;, preds_levels = c(&#39;no&#39;,&#39;yes&#39;), cutoff = 0.5, base = &#39;Caucasian&#39;) . Proportional parity . Proportional parity is very similar to the demographic parity. Proportional parity is achieved if the proportion of positive predictions in the subgroups are close to each other. Similar to the demographic parity, this measure also does not depend on the true labels. Formula: (TP + FP) / (TP + FP + TN + FN) . prop_parity(data = compas, outcome = &#39;Two_yr_Recidivism&#39;, group = &#39;ethnicity&#39;, probs = &#39;probability&#39;, preds_levels = c(&#39;no&#39;,&#39;yes&#39;), cutoff = 0.5, base = &#39;Caucasian&#39;) . All the remaining fairness metrics account for both model predictions and the true labels. . Equalized odds . Equalized odds are achieved if the sensitivities in the subgroups are close to each other. The group-specific sensitivities indicate the number of the true positives divided by the total number of positives in that group. Formula: TP / (TP + FN) . equal_odds(data = compas, outcome = &#39;Two_yr_Recidivism&#39;, group = &#39;ethnicity&#39;, probs = &#39;probability&#39;, preds_levels = c(&#39;no&#39;,&#39;yes&#39;), cutoff = 0.5, base = &#39;African_American&#39;) . Predictive rate parity . Predictive rate parity is achieved if the precisions or positive predictive values in the subgroups are close to each other. The precisions stand for the number of the true positives divided by the total number of examples predicted positive within a group. Formula: TP / (TP + FP) . pred_rate_parity(data = compas, outcome = &#39;Two_yr_Recidivism&#39;, group = &#39;ethnicity&#39;, probs = &#39;probability&#39;, preds_levels = c(&#39;no&#39;,&#39;yes&#39;), cutoff = 0.5, base = &#39;African_American&#39;) . Accuracy parity . Accuracy parity is achieved if the accuracies (all accurately classified examples divided by the total number of examples) in the subgroups are close to each other. Formula: (TP + TN) / (TP + FP + TN + FN) . acc_parity(data = compas, outcome = &#39;Two_yr_Recidivism&#39;, group = &#39;ethnicity&#39;, probs = &#39;probability&#39;, preds_levels = c(&#39;no&#39;,&#39;yes&#39;), cutoff = 0.5, base = &#39;African_American&#39;) . False negative rate parity . False negative rate parity is achieved if the false negative rates (the ratio between the number of false negatives and the total number of positives) in the subgroups are close to each other. Formula: FN / (TP + FN) . fnr_parity(data = compas, outcome = &#39;Two_yr_Recidivism&#39;, group = &#39;ethnicity&#39;, probs = &#39;probability&#39;, preds_levels = c(&#39;no&#39;,&#39;yes&#39;), cutoff = 0.5, base = &#39;African_American&#39;) . False positive rate parity . False positive rate parity is achieved if the false positive rates (the ratio between the number of false positives and the total number of negatives) in the subgroups are close to each other. Formula: FP / (TN + FP) . fpr_parity(data = compas, outcome = &#39;Two_yr_Recidivism&#39;, group = &#39;ethnicity&#39;, probs = &#39;probability&#39;, preds_levels = c(&#39;no&#39;,&#39;yes&#39;), cutoff = 0.5, base = &#39;African_American&#39;) . Negative predictive value parity . Negative predictive value parity is achieved if the negative predictive values in the subgroups are close to each other. The negative predictive value is computed as a ratio between the number of true negatives and the total number of predicted negatives. This function can be considered the ‘inverse’ of the predictive rate parity. Formula: TN / (TN + FN) . npv_parity(data = compas, outcome = &#39;Two_yr_Recidivism&#39;, group = &#39;ethnicity&#39;, probs = &#39;probability&#39;, preds_levels = c(&#39;no&#39;,&#39;yes&#39;), cutoff = 0.5, base = &#39;African_American&#39;) . Specificity parity . Specificity parity is achieved if the specificities (the ratio of the number of the true negatives and the total number of negatives) in the subgroups are close to each other. This function can be considered the ‘inverse’ of the equalized odds. Formula: TN / (TN + FP) . spec_parity(data = compas, outcome = &#39;Two_yr_Recidivism&#39;, group = &#39;ethnicity&#39;, probs = &#39;probability&#39;, preds_levels = c(&#39;no&#39;,&#39;yes&#39;), cutoff = 0.5, base = &#39;African_American&#39;) . Apart from the parity-based metrics presented above, two additional comparisons are implemented: ROC AUC comparison and Matthews correlation coefficient comparison. . ROC AUC comparison . This function calculates ROC AUC and visualizes ROC curves for all subgroups. Note that probabilities must be defined for this function. Also, as ROC evaluates all possible cutoffs, the cutoff argument is excluded from this function. . roc_parity(data = compas, outcome = &#39;Two_yr_Recidivism&#39;, group = &#39;ethnicity&#39;, probs = &#39;probability&#39;, preds_levels = c(&#39;no&#39;,&#39;yes&#39;), base = &#39;African_American&#39;) . Matthews correlation coefficient comparison . The Matthews correlation coefficient (MCC) takes all four classes of the confusion matrix into consideration. MCC is sometimes referred to as the single most powerful metric in binary classification problems, especially for data with class imbalances. Formula: (TP×TN-FP×FN)/√((TP+FP)×(TP+FN)×(TN+FP)×(TN+FN)) . mcc_parity(data = compas, outcome = &#39;Two_yr_Recidivism&#39;, group = &#39;ethnicity&#39;, probs = &#39;probability&#39;, preds_levels = c(&#39;no&#39;,&#39;yes&#39;), cutoff = 0.5, base = &#39;African_American&#39;) . 5. Output and visualizations . All fairness metric functions output results as a dataframe and the corresponding barcharts that provide visual cues about the parity metrics for the defined sensitive subgroups. For instance, let’s look at predictive rate parity with ethnicity being set as the sensitive group and considering Caucasians as the ‘base’ group: . output &lt;- pred_rate_parity(data = compas, outcome = &#39;Two_yr_Recidivism&#39;, group = &#39;ethnicity&#39;, probs = &#39;probability&#39;, preds_levels = c(&#39;no&#39;,&#39;yes&#39;), cutoff = 0.5, base = &#39;Caucasian&#39;) . output$Metric #&gt; Caucasian African_American Asian Hispanic #&gt; Precision 0.6967156 0.6828704 0.7777778 0.7194444 #&gt; Predictive Rate Parity 1.0000000 0.9801279 1.1163490 1.0326229 #&gt; Native_American Other #&gt; Precision 0.6666667 0.7209302 #&gt; Predictive Rate Parity 0.9568706 1.0347554 . In the upper row, the raw precision values are shown for all ethnicities, and in the row below, the relative precisions compared to Caucasians are shown. Note that in case an other ethnic group is set as the base group (e.g. Hispanic), the raw precision values do not change, only the relative metrics: . output &lt;- pred_rate_parity(data = compas, outcome = &#39;Two_yr_Recidivism&#39;, group = &#39;ethnicity&#39;, probs = &#39;probability&#39;, preds_levels = c(&#39;no&#39;,&#39;yes&#39;), cutoff = 0.5, base = &#39;Hispanic&#39;) . output$Metric #&gt; Hispanic Caucasian African_American Asian #&gt; Precision 0.7194444 0.6967156 0.6828704 0.7777778 #&gt; Predictive Rate Parity 1.0000000 0.9684078 0.9491634 1.0810811 #&gt; Native_American Other #&gt; Precision 0.6666667 0.7209302 #&gt; Predictive Rate Parity 0.9266409 1.0020652 . A standard output is a barchart that shows the relative metrics for all subgroups. For the previous case (when Hispanic is defined as the base group), this plot would look like this: . output$Metric_plot . . When probabilities are defined, an extra density plot will be output with the distributions of probabilities of all subgroups and the user-defined cutoff: . output$Probability_plot . . Another example would be comparing males vs. females in terms of recidivism prediction and defining a 0.4 cutoff: . output &lt;- pred_rate_parity(data = compas, outcome = &#39;Two_yr_Recidivism&#39;, group = &#39;Female&#39;, probs = &#39;probability&#39;, preds_levels = c(&#39;no&#39;,&#39;yes&#39;), cutoff = 0.4, base = &#39;Male&#39;) . output$Probability_plot . . The function related to ROC AUC comparisons will output ROC curves for each subgroups. Let’s look at the plot, also comparing males vs. females: . output &lt;- roc_parity(data = compas, outcome = &#39;Two_yr_Recidivism&#39;, group = &#39;Female&#39;, probs = &#39;probability&#39;, preds_levels = c(&#39;no&#39;, &#39;yes&#39;), base = &#39;Male&#39;) . output$ROCAUC_plot . . 6. Closing words . You have read through the fairness R package tutorial! By now, you should have a solid grip on algorithmic group fairness metrics. We hope that you will be able to use the R package in your data analysis! Please let us know if you run into any issues while working with the package here: fairness GitHub. Please also feel free to contact the authors if you have any feedback! . .",
            "url": "https://kozodoi.github.io/blog/r/fairness/packages/2020/05/01/fairness-tutorial.html",
            "relUrl": "/r/fairness/packages/2020/05/01/fairness-tutorial.html",
            "date": " • May 1, 2020"
        }
        
    
  

  
  

  
      ,"page1": {
          "title": "About",
          "content": "Hi, I am Nikita! . I am a PhD student at Humboldt University of Berlin and research associate at the Monedo data science team. Please click here to view my CV. . . . I am passionate about machine learning and data science. My latest work focuses on machine learning applications in the field of credit risk analytics. I also enjoy participating at machine learning competitions and hackathons. . This website hosts my blog with machine learning tutorials, competition solutions and findings from different projects. It also provides links to my academic publications and developed software packages. . . If you want to chat or see more of my work, please feel free to connect with me on different platforms: . LinkedIn | GitHub | Google Scholar | ResearchGate | Kaggle | . . I am also happy to chat on other social media: . Twitter | Instagram | .",
          "url": "https://kozodoi.github.io/blog/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  

  
      ,"page3": {
          "title": "Packages",
          "content": "This page provides a list of the Python and R packages I have developed. Follow me on GitHub to see my latest projects. . . dptools: Python package with helper functions for data processing and feature engineering. See on GitHub or PyPi. . | fairness: R package for computing different measures of algorithmic fairness. See on GitHub or CRAN. The tutorial on the package is available in this blogpost. . | .",
          "url": "https://kozodoi.github.io/blog/packages/",
          "relUrl": "/packages/",
          "date": ""
      }
      
  

  
      ,"page4": {
          "title": "Publications",
          "content": "This page provides a selected list of my publications in academic journals and conference proceedings. Please follow me on Google Scholar or ResearchGate to see all of my latest work. . . 2020 . Kozodoi, N., Katsas, P., Lessmann, S., Moreira-Matias, L., &amp; Papakonstantinou, K. (2020). Shallow Self-Learning for Reject Inference in Credit Scoring. In ECML PKDD 2019 Proceedings (pp. 516-532). Springer, Cham. Read on ResearchGate or on publisher’s website. | . 2019 . Kozodoi, N., Lessmann, S., Papakonstantinou, K., Gatsoulis, Y., &amp; Baesens, B. (2019). A multi-objective approach for profit-driven feature selection in credit scoring. Decision Support Systems, 120, 106-117. Read on ResearchGate or on publisher’s website. . | Kozodoi, N., Lessmann, S., Baesens, B., &amp; Papakonstantinou, K. (2019). Profit-Oriented Feature Selection in Credit Scoring Applications. In Operations Research 2018 Proceedings (pp. 59-65). Springer, Cham. Read on ResearchGate or on publisher’s website. . | .",
          "url": "https://kozodoi.github.io/blog/publications/",
          "relUrl": "/publications/",
          "date": ""
      }
      
  

  
  

  

  
  

  

  
  

  
  

  
  

  
      ,"page12": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://kozodoi.github.io/blog/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}